library(rbenchmark)
library(msa)
mySequenceFile <- system.file("examples", "exampleDNA.fasta", package="msa")
mySequences <- readAAStringSet(mySequenceFile)
mySequences
mySequenceFile <- "/Users/sigmadream/Works/R/RV100/BBA0001.tfa"
mySequences <- readAAStringSet(mySequenceFile)
mySequences
myFirstAlignment <- msa(mySequences)
help("print,MsaDNAMultipleAlignment-method")
print(myAlignment, show="alignment")
print(myFirstAlignment, show="alignment")
print(myFirstAlignment, show="complete", type="upperlower", thresh=c(50, 20))
params(myFirstAlignment)
print(myFirstAlignment, showNames=FALSE, show="complete")
n_points <- 10
N0 <- ceiling(2^seq(5, 13, length.out=n_points))
N1 <- ceiling(2^seq(5, 12, length.out=n_points))
N2 <- ceiling(2^seq(5, 13, length.out=n_points))
N3 <- ceiling(2^seq(5, 16, length.out=n_points))
timings0 <- setNames(rep(0, length(N0)), N0)
timings1 <- setNames(rep(0, length(N1)), N1)
timings2 <- setNames(rep(0, length(N2)), N2)
timings3 <- setNames(rep(0, length(N3)), N3)
for (i in seq_len(length(N0))) {
for (j in 0:3) {
N <- eval(parse(text=paste("N", j, sep="")))
# simulate sequences with 15% distance
string1 <- DNAStringSet(paste(sample(DNA_ALPHABET[1:4], N[i], replace = TRUE), collapse = ""))
string2 <- replaceAt(string1,
at=IRanges(sample(N[i], ceiling(N[i]/5)), width=1),
sample(c(DNA_ALPHABET[1:4], ""), ceiling(N[i]/5), replace = TRUE))
# align the sequences using two methods
if (j==0) {
timings0[i] <- system.time(myFirstAlignment <- msa(mySequences)))[["user.self"]]
} else if (j==1) {
timings1[i] <- system.time(oneFirstAlignment <- msa(mySequences, "ClustalW"))[["user.self"]]
} else if (j==2) {
timings2[i] <- system.time(twoFirstAlignment <- msa(mySequences, "ClustalOmega"))[["user.self"]]
} else { # j == 3
timings3[i] <- system.time(threeFirstAlignment <- msa(mySequences, "Muscle"))[["user.self"]]
}
}
}
for (i in seq_len(length(N0))) {
for (j in 0:3) {
N <- eval(parse(text=paste("N", j, sep="")))
# simulate sequences with 15% distance
string1 <- DNAStringSet(paste(sample(DNA_ALPHABET[1:4], N[i], replace = TRUE), collapse = ""))
string2 <- replaceAt(string1,
at=IRanges(sample(N[i], ceiling(N[i]/5)), width=1),
sample(c(DNA_ALPHABET[1:4], ""), ceiling(N[i]/5), replace = TRUE))
# align the sequences using two methods
if (j==0) {
timings0[i] <- system.time(myFirstAlignment <- msa(mySequences)))[["user.self"]]
} else if (j==1) {
timings1[i] <- system.time(oneFirstAlignment <- msa(mySequences, "ClustalW"))[["user.self"]]
} else if (j==2) {
timings2[i] <- system.time(twoFirstAlignment <- msa(mySequences, "ClustalOmega"))[["user.self"]]
} else { # j == 3
timings3[i] <- system.time(threeFirstAlignment <- msa(mySequences, "Muscle"))[["user.self"]]
}
}
}
for (i in seq_len(length(N0))) {
for (j in 0:3) {
N <- eval(parse(text=paste("N", j, sep="")))
# simulate sequences with 15% distance
string1 <- DNAStringSet(paste(sample(DNA_ALPHABET[1:4], N[i], replace = TRUE), collapse = ""))
string2 <- replaceAt(string1,
at=IRanges(sample(N[i], ceiling(N[i]/5)), width=1),
sample(c(DNA_ALPHABET[1:4], ""), ceiling(N[i]/5), replace = TRUE))
# align the sequences using two methods
if (j==0) {
timings0[i] <- system.time(myFirstAlignment <- msa(mySequences))[["user.self"]]
} else if (j==1) {
timings1[i] <- system.time(oneFirstAlignment <- msa(mySequences, "ClustalW"))[["user.self"]]
} else if (j==2) {
timings2[i] <- system.time(twoFirstAlignment <- msa(mySequences, "ClustalOmega"))[["user.self"]]
} else { # j == 3
timings3[i] <- system.time(threeFirstAlignment <- msa(mySequences, "Muscle"))[["user.self"]]
}
}
}
c0 <- lm(timings0 ~ N0 + I(N0^2))
c1 <- lm(timings1 ~ N1 + I(N1^2))
c2 <- lm(timings2 ~ N2)
c3 <- lm(timings3 ~ N3)
N <- seq(1, 46340, length.out=1000) # prediction range
plot(N0, timings0,
xlab = "Sequence length (nucleotides)",
ylab = "Elapsed Time (sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3,
predict(c2, data.frame(N2=46340)))),
xlim=c(0, max(N3)))
points(N, predict(c0,
data.frame(N0 = N)),
type="l", lty=3)
points(N1, timings1,
col="blue", pch=0)
points(N, predict(c1,
data.frame(N1 = N)),
type="l", lty=3, col="blue")
points(N2, timings2,
col="red", pch=5)
points(N, predict(c2,
data.frame(N2 = N)),
type="l", lty=3, col="red")
N <- seq(1, max(N3), length.out=1000) # prediction range
points(N3, timings3,
col="green", pch=2)
points(N, predict(c3,
data.frame(N3 = N)),
type="l", lty=3, col="green")
legend("bottomright",
c("Biostrings::pairwiseAlignment",
"AlignProfiles (unrestricted, unanchored)",
"AlignProfiles (restricted, unanchored)",
"AlignProfiles (restricted, anchored)"),
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
c0 <- lm(timings0 ~ N0 + I(N0^2))
c1 <- lm(timings1 ~ N1 + I(N1^2))
c2 <- lm(timings2 ~ N2)
c3 <- lm(timings3 ~ N3)
plot(N0, timings0,
xlab = "Sequence length (nucleotides)",
ylab = "Elapsed Time (sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3,
predict(c2, data.frame(N2=46340)))),
xlim=c(0, max(N3)))
plot(N0, timings0,
xlab = "Sequence length",
ylab = "Elapsed Time(sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3)),
xlim=c(0, max(N3)))
plot(N0, timings0,
xlab = "Sequence length",
ylab = "Elapsed Time(sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3)),
xlim=c(0, max(N3)))
points(N, predict(c0,data.frame(N0 = N)),type="l", lty=3)
points(N1, timings1, col="blue", pch=0)
points(N, predict(c1,data.frame(N1 = N)),type="l", lty=3, col="blue")
points(N2, timings2,col="red", pch=5)
points(N, predict(c2,data.frame(N2 = N)),type="l", lty=3, col="red")
points(N3, timings3,col="green", pch=2)
points(N, predict(c3,data.frame(N3 = N)),
type="l", lty=3, col="green")
N0 <- ceiling(2^seq(5, 12, length.out=n_points))
N1 <- ceiling(2^seq(5, 12, length.out=n_points))
N2 <- ceiling(2^seq(5, 12, length.out=n_points))
N3 <- ceiling(2^seq(5, 12, length.out=n_points))
timings0 <- setNames(rep(0, length(N0)), N0)
timings1 <- setNames(rep(0, length(N1)), N1)
timings2 <- setNames(rep(0, length(N2)), N2)
timings3 <- setNames(rep(0, length(N3)), N3)
for (i in seq_len(length(N0))) {
for (j in 0:3) {
N <- eval(parse(text=paste("N", j, sep="")))
# simulate sequences with 15% distance
string1 <- DNAStringSet(paste(sample(DNA_ALPHABET[1:4], N[i], replace = TRUE), collapse = ""))
string2 <- replaceAt(string1,
at=IRanges(sample(N[i], ceiling(N[i]/5)), width=1),
sample(c(DNA_ALPHABET[1:4], ""), ceiling(N[i]/5), replace = TRUE))
# align the sequences using two methods
if (j==0) {
timings0[i] <- system.time(myFirstAlignment <- msa(mySequences))[["user.self"]]
} else if (j==1) {
timings1[i] <- system.time(oneFirstAlignment <- msa(mySequences, "ClustalW"))[["user.self"]]
} else if (j==2) {
timings2[i] <- system.time(twoFirstAlignment <- msa(mySequences, "ClustalOmega"))[["user.self"]]
} else { # j == 3
timings3[i] <- system.time(threeFirstAlignment <- msa(mySequences, "Muscle"))[["user.self"]]
}
}
}
c0 <- lm(timings0 ~ N0 + I(N0^2))
c1 <- lm(timings1 ~ N1 + I(N1^2))
c2 <- lm(timings2 ~ N2)
c3 <- lm(timings3 ~ N3)
N <- seq(1, 46340, length.out=1000) # prediction range
plot(N0, timings0,
xlab = "Sequence length",
ylab = "Elapsed Time(sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3)),
xlim=c(0, max(N3)))
points(N, predict(c0,data.frame(N0 = N)),type="l", lty=3)
points(N1, timings1, col="blue", pch=0)
points(N, predict(c1,data.frame(N1 = N)),type="l", lty=3, col="blue")
points(N2, timings2,col="red", pch=5)
points(N, predict(c2,data.frame(N2 = N)),type="l", lty=3, col="red")
N <- seq(1, max(N3), length.out=1000) # prediction range
points(N3, timings3,col="green", pch=2)
points(N, predict(c3,data.frame(N3 = N)),type="l", lty=3, col="green")
legend("bottomright",
c("Biostrings::pairwiseAlignment",
"AlignProfiles (unrestricted, unanchored)",
"AlignProfiles (restricted, unanchored)",
"AlignProfiles (restricted, anchored)"),
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
c0 <- lm(timings0 ~ N0 + I(N0^2))
c1 <- lm(timings1 ~ N1 + I(N1^2))
c2 <- lm(timings2 ~ N2)
c3 <- lm(timings3 ~ N3)
N <- seq(1, 46340, length.out=1000) # prediction range
plot(N0, timings0,
xlab = "Sequence length",
ylab = "Elapsed Time(sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3)),
xlim=c(0, max(N3)))
points(N, predict(c0,data.frame(N0 = N)),type="l", lty=3)
points(N1, timings1, col="blue", pch=0)
points(N, predict(c1,data.frame(N1 = N)),type="l", lty=3, col="blue")
points(N2, timings2,col="red", pch=5)
points(N, predict(c2,data.frame(N2 = N)),type="l", lty=3, col="red")
N <- seq(1, max(N3), length.out=1000) # prediction range
points(N3, timings3,col="green", pch=2)
points(N, predict(c3,data.frame(N3 = N)),type="l", lty=3, col="green")
legend("bottomright",
c("msa",
"ClustalW",
"ClustalOmega",
"Muscle",
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
legend("bottomright",
c("msa",
"ClustalW",
"ClustalOmega",
"Muscle")
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
legend("bottomright",
c("msa",
"ClustalW",
"ClustalOmega",
"Muscle"),
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
N <- seq(1, 1000, length.out=1000) # prediction range
plot(N0, timings0,
xlab = "Sequence length",
ylab = "Elapsed Time(sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3)),
xlim=c(0, max(N3)))
points(N, predict(c0,data.frame(N0 = N)),type="l", lty=3)
points(N1, timings1, col="blue", pch=0)
points(N, predict(c1,data.frame(N1 = N)),type="l", lty=3, col="blue")
points(N2, timings2,col="red", pch=5)
points(N, predict(c2,data.frame(N2 = N)),type="l", lty=3, col="red")
N <- seq(1, max(N3), length.out=1000) # prediction range
points(N3, timings3,col="green", pch=2)
points(N, predict(c3,data.frame(N3 = N)),type="l", lty=3, col="green")
legend("bottomright",
c("msa",
"ClustalW",
"ClustalOmega",
"Muscle"),
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
N <- seq(1, 10000, length.out=1000) # prediction range
plot(N0, timings0,
xlab = "Sequence length",
ylab = "Elapsed Time(sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3)),
xlim=c(0, max(N3)))
points(N, predict(c0,data.frame(N0 = N)),type="l", lty=3)
points(N1, timings1, col="blue", pch=0)
points(N, predict(c1,data.frame(N1 = N)),type="l", lty=3, col="blue")
points(N2, timings2,col="red", pch=5)
points(N, predict(c2,data.frame(N2 = N)),type="l", lty=3, col="red")
N <- seq(1, max(N3), length.out=1000) # prediction range
points(N3, timings3,col="green", pch=2)
points(N, predict(c3,data.frame(N3 = N)),type="l", lty=3, col="green")
legend("bottomright",
c("msa",
"ClustalW",
"ClustalOmega",
"Muscle"),
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
N <- seq(1, 10, length.out=1) # prediction range
plot(N0, timings0,
xlab = "Sequence length",
ylab = "Elapsed Time(sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3)),
xlim=c(0, max(N3)))
points(N, predict(c0,data.frame(N0 = N)),type="l", lty=3)
points(N1, timings1, col="blue", pch=0)
points(N, predict(c1,data.frame(N1 = N)),type="l", lty=3, col="blue")
points(N2, timings2,col="red", pch=5)
points(N, predict(c2,data.frame(N2 = N)),type="l", lty=3, col="red")
N <- seq(1, max(N3), length.out=1000) # prediction range
points(N3, timings3,col="green", pch=2)
points(N, predict(c3,data.frame(N3 = N)),type="l", lty=3, col="green")
legend("bottomright",
c("msa",
"ClustalW",
"ClustalOmega",
"Muscle"),
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
n_points <- 10
N0 <- ceiling(seq(5, 12, length.out=n_points))
N1 <- ceiling(seq(5, 12, length.out=n_points))
N2 <- ceiling(seq(5, 12, length.out=n_points))
N3 <- ceiling(seq(5, 12, length.out=n_points))
timings0 <- setNames(rep(0, length(N0)), N0)
timings1 <- setNames(rep(0, length(N1)), N1)
timings2 <- setNames(rep(0, length(N2)), N2)
timings3 <- setNames(rep(0, length(N3)), N3)
c0 <- lm(timings0 ~ N0 + I(N0^2))
c1 <- lm(timings1 ~ N1 + I(N1^2))
c2 <- lm(timings2 ~ N2)
c3 <- lm(timings3 ~ N3)
N <- seq(1, 10, length.out=1) # prediction range
plot(N0, timings0,
xlab = "Sequence length",
ylab = "Elapsed Time(sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3)),
xlim=c(0, max(N3)))
points(N, predict(c0,data.frame(N0 = N)),type="l", lty=3)
points(N1, timings1, col="blue", pch=0)
points(N, predict(c1,data.frame(N1 = N)),type="l", lty=3, col="blue")
points(N2, timings2,col="red", pch=5)
points(N, predict(c2,data.frame(N2 = N)),type="l", lty=3, col="red")
N <- seq(1, max(N3), length.out=1000) # prediction range
points(N3, timings3,col="green", pch=2)
points(N, predict(c3,data.frame(N3 = N)),type="l", lty=3, col="green")
legend("bottomright",
c("msa",
"ClustalW",
"ClustalOmega",
"Muscle"),
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
N0 <- ceiling(seq(1, 100, length.out=n_points))
N1 <- ceiling(seq(1, 100, length.out=n_points))
N2 <- ceiling(seq(1, 100, length.out=n_points))
N3 <- ceiling(seq(1, 100, length.out=n_points))
timings0 <- setNames(rep(0, length(N0)), N0)
timings1 <- setNames(rep(0, length(N1)), N1)
timings2 <- setNames(rep(0, length(N2)), N2)
timings3 <- setNames(rep(0, length(N3)), N3)
for (i in seq_len(length(N0))) {
for (j in 0:3) {
N <- eval(parse(text=paste("N", j, sep="")))
# simulate sequences with 15% distance
string1 <- DNAStringSet(paste(sample(DNA_ALPHABET[1:4], N[i], replace = TRUE), collapse = ""))
string2 <- replaceAt(string1,
at=IRanges(sample(N[i], ceiling(N[i]/5)), width=1),
sample(c(DNA_ALPHABET[1:4], ""), ceiling(N[i]/5), replace = TRUE))
# align the sequences using two methods
if (j==0) {
timings0[i] <- system.time(myFirstAlignment <- msa(mySequences))[["user.self"]]
} else if (j==1) {
timings1[i] <- system.time(oneFirstAlignment <- msa(mySequences, "ClustalW"))[["user.self"]]
} else if (j==2) {
timings2[i] <- system.time(twoFirstAlignment <- msa(mySequences, "ClustalOmega"))[["user.self"]]
} else { # j == 3
timings3[i] <- system.time(threeFirstAlignment <- msa(mySequences, "Muscle"))[["user.self"]]
}
}
}
c0 <- lm(timings0 ~ N0 + I(N0^2))
c1 <- lm(timings1 ~ N1 + I(N1^2))
c2 <- lm(timings2 ~ N2)
c3 <- lm(timings3 ~ N3)
N <- seq(1, 10, length.out=1) # prediction range
plot(N0, timings0,
xlab = "Sequence length",
ylab = "Elapsed Time(sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3)),
xlim=c(0, max(N3)))
points(N, predict(c0,data.frame(N0 = N)),type="l", lty=3)
points(N1, timings1, col="blue", pch=0)
points(N, predict(c1,data.frame(N1 = N)),type="l", lty=3, col="blue")
points(N2, timings2,col="red", pch=5)
points(N, predict(c2,data.frame(N2 = N)),type="l", lty=3, col="red")
N <- seq(1, max(N3), length.out=1000) # prediction range
points(N3, timings3,col="green", pch=2)
points(N, predict(c3,data.frame(N3 = N)),type="l", lty=3, col="green")
legend("bottomright",
c("msa",
"ClustalW",
"ClustalOmega",
"Muscle"),
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
N0 <- ceiling(2^seq(1, 100, length.out=n_points))
N1 <- ceiling(2^seq(1, 100, length.out=n_points))
N2 <- ceiling(2^seq(1, 100, length.out=n_points))
N3 <- ceiling(2^seq(1, 100, length.out=n_points))
timings0 <- setNames(rep(0, length(N0)), N0)
timings1 <- setNames(rep(0, length(N1)), N1)
timings2 <- setNames(rep(0, length(N2)), N2)
timings3 <- setNames(rep(0, length(N3)), N3)
c0 <- lm(timings0 ~ N0 + I(N0^2))
c1 <- lm(timings1 ~ N1 + I(N1^2))
c2 <- lm(timings2 ~ N2)
c3 <- lm(timings3 ~ N3)
N <- seq(1, 10, length.out=1) # prediction range
plot(N0, timings0,
xlab = "Sequence length",
ylab = "Elapsed Time(sec.)",
main = "",
ylim=c(range(timings0,
timings1,
timings2,
timings3)),
xlim=c(0, max(N3)))
points(N, predict(c0,data.frame(N0 = N)),type="l", lty=3)
points(N1, timings1, col="blue", pch=0)
points(N, predict(c1,data.frame(N1 = N)),type="l", lty=3, col="blue")
points(N2, timings2,col="red", pch=5)
points(N, predict(c2,data.frame(N2 = N)),type="l", lty=3, col="red")
N <- seq(1, max(N3), length.out=1000) # prediction range
points(N3, timings3,col="green", pch=2)
points(N, predict(c3,data.frame(N3 = N)),type="l", lty=3, col="green")
legend("bottomright",
c("msa",
"ClustalW",
"ClustalOmega",
"Muscle"),
pch=c(1, 0, 5, 2), lty=3,
col=c("black", "blue", "red", "green"), bg="white")
